# load config
import json
import asyncio
import cv2
import base64
import numpy as np
import httpx
import time
import requests
import time
import random
from simplegmail import Gmail

with open('roboflow_config.json') as f:
    config = json.load(f)

    ROBOFLOW_API_KEY = config["ROBOFLOW_API_KEY"]
    ROBOFLOW_MODEL = config["ROBOFLOW_MODEL"]
    ROBOFLOW_SIZE = config["ROBOFLOW_SIZE"]

    FRAMERATE = config["FRAMERATE"]
    BUFFER = config["BUFFER"]

# Construct the Roboflow Infer URL
# (if running locally replace https://detect.roboflow.com/ with eg http://127.0.0.1:9001/)
upload_url = "".join([
    "https://detect.roboflow.com/",
    ROBOFLOW_MODEL,
    "?api_key=",
    ROBOFLOW_API_KEY,
    "&format=json", # Change to json if you want the prediction boxes, not the visualization
    "&stroke=5"
])

gmail = Gmail()
params = {
        "to": "aimodeltesting2023@gmail.com",
        "sender": "emzhao2023@gmail.com",
        "subject": "Firearm Detected by AI Model",
        "msg_plain": "Target detected! Immediate action required.",
        "attachments": ["detect.jpg"]
        }

# Get webcam interface via opencv-python
video = cv2.VideoCapture(0)
stack = 0

# Infer via the Roboflow Infer API and return the result
# Takes an httpx.AsyncClient as a parameter
async def infer(requests):
    # Get the current image from the webcam
    global stack
    ret, img = video.read()
    # Resize (while maintaining the aspect ratio) to improve speed and save bandwidth
    height, width, channels = img.shape
    scale = ROBOFLOW_SIZE / max(height, width)
    img = cv2.resize(img, (round(scale * width), round(scale * height)))

    # Encode image to base64 string
    retval, buffer = cv2.imencode('.jpg', img)
    img_str = base64.b64encode(buffer)

    # Get prediction from Roboflow Infer API
    resp = await requests.post(upload_url, data=img_str, headers={
        "Content-Type": "application/x-www-form-urlencoded"
    })
    
    try:
        resp = json.loads(resp.read())
    except:
        print("could not parse response")
    #print(resp)
    preds=resp["predictions"]
    for pred in preds:
        if pred["confidence"]>0.4:
            print("Firearm detected! confidence:", pred['confidence'])
            x1 = round(pred["x"] - pred["width"] / 2)
            x2 = round(pred["x"] + pred["width"] / 2)
            y1 = round(pred["y"] - pred["height"] / 2)
            y2 = round(pred["y"] + pred["height"] / 2)
            cv2.rectangle(img, (x1, y1), (x2, y2), (190,64,220), 5)

            stack = stack + pred['confidence']
            if stack > 5:
                cv2.imwrite('detect.jpg', img)
                message = gmail.send_message(**params)
                print('alert sent', stack)
                stack = 0
            #lock.release()


    # Parse result image
    #image = np.asarray(bytearray(resp.content), dtype="uint8")
    #image = cv2.imdecode(image, cv2.IMREAD_COLOR)

    return img

# Main loop; infers at FRAMERATE frames per second until you press "q"
async def main():
    # Initialize
    last_frame = time.time()

    # Initialize a buffer of images
    futures = []

    async with httpx.AsyncClient() as requests:
        while 1:
            # On "q" keypress, exit
            if(cv2.waitKey(1) == ord('q')):
                break

            # Throttle to FRAMERATE fps and print actual frames per second achieved
            elapsed = time.time() - last_frame
            await asyncio.sleep(max(0, 1/FRAMERATE - elapsed))
            print((1/(time.time()-last_frame)), " fps")
            last_frame = time.time()

            # Enqueue the inference request and safe it to our buffer
            task = asyncio.create_task(infer(requests))
            futures.append(task)
            

            # Wait until our buffer is big enough before we start displaying results
            if len(futures) < BUFFER * FRAMERATE:
                continue

            # Remove the first image from our buffer
            # wait for it to finish loading (if necessary)
            image = await futures.pop(0)
            # And display the inference results
            cv2.imshow('image', image)
            

# Run our main loop
#await main()
asyncio.run(main())
# Release resources when finished
video.release()
cv2.destroyAllWindows()